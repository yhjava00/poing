<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
      PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
   "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="store">
	
	<select id="totStorePastRes" parameterType="map" resultType="int">
		<![CDATA[
			select count(idx) from reservation where store_idx = #{storeIdx} and resDate < #{today}
		]]>
	</select>
	
	<select id="totStoreComingVisit" parameterType="map" resultType="int">
		<![CDATA[
			select count(idx) from reservation where store_idx = #{storeIdx} and resDate >= #{today}
		]]>
	</select>
	
	<select id="storePastResList" parameterType="map" resultType="reservationVO">
		<![CDATA[
			select * 
			from (select rownum rn, A.* 
			        from (select * 
			                from reservation r   
			                where r.store_idx = #{storeIdx} and r.resdate < #{today}
			                order by r.resdate desc, r.time)A)
			where rn between (#{page}-1) * 10 + 1 and #{page} * 10
		]]>
	</select>

	<select id="storeComingVisitList" parameterType="map" resultType="reservationVO">
		<![CDATA[
			select * 
			from (select rownum rn, A.* 
			        from (select * 
			                from reservation r   
			                where r.store_idx = #{storeIdx} and r.resdate >= #{today}
			                order by r.resdate, r.time)A)
			where rn between (#{page}-1) * 10 + 1 and #{page} * 10
		]]>
	</select>
	
	<select id="selectStoreAll" parameterType="map" resultType="storeAllVO">
		select s.*, i.*, nvl(A.store_idx, 0) likeStore
		from store s inner join store_info i on s.idx = i.store_idx 
		left join (select store_idx from like_store where member_id = #{id}) A on A.store_idx = s.idx
		where s.idx = #{storeIdx}
	</select>
	
	<select id="selectStore" parameterType="int" resultType="storeVO">
		select * from store where idx = #{storeIdx}
	</select>
	
	<select id="selectstoreImgList" parameterType="int" resultType="String">
		select img_name from store_img where store_idx = #{idx}
	</select>
	
	<update id="updateStore" parameterType="storeAllVO">
		update store set category = #{category}, store_name = #{store_name}, introduce = #{introduce},
		location1 = #{location1}, location2 = #{location2} where idx = #{idx}
	</update>
	
	<update id="updateStoreInfo" parameterType="storeAllVO">
		update store_info set addr = #{addr}, tel = #{tel}, opening_hours = #{opening_hours},
		closed_days = #{closed_days}, parking = #{parking}, max_num_people = #{max_num_people}
		where store_idx = #{idx}
	</update>
	
	<select id="totStoreImg" parameterType="int" resultType="int">
		select count(idx) from store_img where store_idx = #{storeIdx}
	</select>
	
	<delete id="deleteImg" parameterType="map">
		delete from store_img where store_idx = #{storeIdx} and img_name = #{img}
	</delete>
	
	<update id="updateMainImg" parameterType="map">
		update store set main_img = #{mainImg} where idx = #{storeIdx}
	</update>
	
	<insert id="insertImg" parameterType="map">
		insert into store_img(idx, img_name, store_idx)
		select store_img_seq.nextval, A.*
		from (
		<foreach collection="fileNameList" item="item" separator="union all">
			select #{item}, #{storeIdx} from dual
		</foreach>
		) A
	</insert>
	
	<insert id="insertStore">
		insert into store (idx, category, store_name, introduce, location1, location2, main_img)
		values (store_seq.nextval, '중식', '이름을 정해주세요', '소개를 정해주세요', '위치', '위치', '뷔페.png')
	</insert>
	
	<select id="selectNewStoreIdx" resultType="int">
		select max(idx) from store
	</select>
	
	<update id="updateMemberStore" parameterType="map">
		update member set store_check = #{storeIdx} where id = #{storeId}
	</update>
	
	<insert id="insertStoreInfo" parameterType="int">
		insert into store_info (idx, store_idx, addr, tel, opening_hours, closed_days, parking, max_num_people)
		values (store_info_seq.nextval, #{storeIdx}, '주소를 정해주세요', '전화번호', '영업 시간', '휴무일', '불가능', 0)
	</insert>
	
</mapper>